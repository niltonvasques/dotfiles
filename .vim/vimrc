" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
"'compatible' option.
" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible
" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.  syntax on

set expandtab
set shiftwidth=2
set softtabstop=2

" enable persistent undo
set undofile "persistent undo
set undodir=~/.vim/undodir

" Create a vertical line to highlight the max colum width
set colorcolumn=100

" break lines using gq command
set tw=100

" Uncomment next line to enable line numbers
set nu

" . If you want to keep the same column, set nosol before going into visual block mode,
" and then hit G
set nosol

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif
" Fixing backspace problem "
set backspace=2

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set nohlsearch          " Completely disable highlighting after search texts
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


" Loading ctrlp plugin"
set runtimepath^=~/.vim/bundle/ctrlp.vim


" STATUS BAR "
set laststatus=2

set statusline=  	" clean status line"
set statusline=%t       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" PATHOGEN "
execute pathogen#infect()
execute pathogen#helptags()

"" OMNI COMPLETION "
filetype plugin on
" set autocomplete popup menu colors "
highlight Pmenu ctermbg=white gui=bold
set completeopt-=preview " disable split window "
if has("autocmd")
  autocmd Filetype java setlocal omnifunc=javacomplete#Complete
  autocmd Filetype c setlocal omnifunc=syntaxcomplete#Complete
  autocmd Filetype c++ setlocal omnifunc=syntaxcomplete#Complete
  autocmd Filetype cpp setlocal omnifunc=syntaxcomplete#Complete

  " Removing trailling whitespace
  autocmd BufWritePre * %s/\s\+$//e
endif

"let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'

" Use this option to change the mapping to invoke CtrlP in |Normal| mode: > "
let g:ctrlp_map = '<c-p>'


" Set the default opening command to use when pressing the above mapping: > "
let g:ctrlp_cmd = 'CtrlP'

" Set the ctrlp ignore files options "
let g:ctrlp_custom_ignore = '\v(\.cache)$'
" Indexing files using git repo track "
let g:ctrlp_user_command =  ['.git', 'cd %s && git ls-files . -co --exclude-standard']

"vim airline "
let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
syntax enable
set background=dark
"" let g:solarized_termcolors=256
"set t_Co=256
"colorscheme solarized
colorscheme tomorrow-night-bright
"colorscheme base16-default
set t_ut=
"let g:solarized_visibility = "high"
"let g:solarized_bold = 1
"let g:solarized_italic = 1
"let g:solarized_contrast = "high"
call togglebg#map("<F5>")


" delimitMate options "
let b:delimitMate_expand_cr = 1
"let b:delimitMate_expand_space = 1

" Indent Options "
autocmd FileType c setlocal autoindent cindent

" Ruby indentation from http://ubuntuforums.org/showthread.php?t=290462
if has ("autocmd")
    filetype indent on
endif

" file is large from 10mb
let g:LargeFile = 1024 * 1024 * 10
augroup LargeFile
 autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function LargeFile()
 " no syntax highlighting etc
 set eventignore+=FileType
 " save memory when other file is viewed
 setlocal bufhidden=unload
 " is read-only (write with :w new_filename)
 setlocal buftype=nowrite
 " no undo possible
 setlocal undolevels=-1
 " display message
 autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed (see .vimrc for details)."
endfunction

"EasyMotion config
" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map <Leader> <Plug>(easymotion-prefix)
let g:EasyMotion_smartcase = 1

let g:python_host_prog = '/usr/bin/python2.7'
let g:python3_host_prog = '/usr/bin/python3'

call plug#begin('~/.vim/plugged')

" Updates the remotes plugin manifest see :help remote-plugin-manifest
"function! DoRemote(arg)
"  UpdateRemotePlugins
"endfunction
"

Plug 'udalov/kotlin-vim'

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins', 'tag': '4.1' }

" Android Studio Plugin to feed kotlin autocomplete
" Not working
"Plug 'beeender/Comrade'

" Auto complete for ruby
Plug 'fishbullet/deoplete-ruby'

Plug 'junegunn/vim-easy-align'

Plug 'vim-scripts/ruby-matchit'

" JSX Support

Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'

" Syntax Highlighting for SQL heredocs
Plug 'aliou/sql-heredoc.vim'

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
"Plug 'junegunn/vim-easy-align'
"
"" Any valid git URL is allowed
"Plug 'https://github.com/junegunn/vim-github-dashboard.git'
"
"" Group dependencies, vim-snippets depends on ultisnips
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
"
"" On-demand loading
"Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
"
"" Using a non-master branch
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
"
"" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
"Plug 'fatih/vim-go', { 'tag': '*' }
"
"" Plugin options
"Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
"
"" Plugin outside ~/.vim/plugged with post-update hook
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"
"" Unmanaged plugin (manually installed and updated)
"Plug '~/my-prototype-plugin'

" Add plugins to &runtimepath
call plug#end()

" ------------------------
" Deoplete settings begin
" ------------------------

" Use deoplete.
let g:deoplete#enable_at_startup = 1

" Let <Tab> also do completion
inoremap <silent><expr> <Tab>
\ pumvisible() ? "\<C-n>" :
\ deoplete#mappings#manual_complete()

" Close the documentation window when completion is done
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
" ------------------------
" end
" ------------------------

" ------------------------
" EasyAlign settings begin
" ------------------------
"
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ------------------------
" end
" ------------------------
"

nmap <C-k> :


"  ----------------------
"  Custom macros
"  ----------------------
"
" wrap => puts \"#\" * 90 above and bellow current line
let @p = 'oputs "#" * 90kOputs "#" * 90'
" remove spaces from beginning and end of parethensis ( ... ) => (...)
let @i = 'V:s/( \Â€kb(Â€kb\(.&Â€kb*)Â€kb\) /Â€kb)/(\1)/ge'

let @r = ':w ! ruby'

" replace do..end => { .. }
let @b = 'vi{"syda{bf adosendV%='
" replace { .. } => do..end
let @v = '?dodwa{€kDJA }jddkf}'
"  ----------------------
"  end
"  ----------------------
